#include <iostream>
using namespace std;
float mult(float a=2.1f, float b=6.5f)
{
    return a*b;
}
int mult(int a, int b=9)
{
    return a*b;
}
int main() 
{
 cout<<mult()<<endl;
 cout<<mult(5);
}



#include <iostream>
using namespace std;
int fun(int f)
{
    if(f==1)
    return 1;
    else
    return f*fun(f-1);
}
int main(){
int a=7;
cout<<"The factorial of 7 is:"<<endl;
cout<<fun(7);    
}




#include <iostream>
using namespace std;

int fun(int x)
{
    int a=11,b=3;
    if(x==1)
    return a*b;
    else if(x==2)
    return a/b;
    else
    return a%b;
}

int main()
{
cout<<fun(3);    
}



#include <iostream>
using namespace std;
class Employee
{
  public:
   char name[100];
   int age;
   void getData();
   void putData();
};
void Employee::getData()
{
  cout<<"Enter your name";
  cin>>name;
  cout<<"Enter your age";
  cin>>age;
}
void Employee::putData()
{
  cout<<"Employee Name "<<name;
  cout<<"Employee Age"<<age;
}
int main(){
  Employee e[5];
  int i;
  for(i=0;i<5;i++)
  {
    e[i].getData();
  }
  for(i=0;i<5;i++)
  {
    e[i].putData();
  }
  return 0;
}



#include <iostream>
using namespace std;
class Demo
{
	private:	
	static int X;
	static int Y;
	public:
	static void Print()
	{
	cout <<"Value of X: " << X << endl;
	cout <<"Value of Y: " << Y << endl;
	}
};
int Demo :: X =10;
int Demo :: Y =20;
int main()
{
Demo OB;
cout<<"Printing through object name:"<<endl;
OB.Print();
cout<<"Printing through class name:"<<endl;
Demo::Print();
return 0;
}





#include <iostream>
using namespace std;
class MyClass{
   private:
      static int st_var;
   public:
      MyClass() {
         st_var++; //increase the value of st_var when new object is created
      }
      static int getStaticVar() {
         return st_var;
      }
};
int MyClass::st_var = 0; //initializing the static int
int main() {
   MyClass ob1, ob2, ob3; //three objects are created
   cout << "Number of objects: " << MyClass::getStaticVar();
}